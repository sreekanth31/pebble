<pebble-plugins>

  <!-- Permalink providers -->

  <permalink-provider name="Default (/yyyy/mm/dd/time-in-millis.html)"
                      class="net.sourceforge.pebble.permalink.DefaultPermalinkProvider">
    <description>Generates permalinks of the form /yyyy/mm/dd/time-in-millis.html (this is the default)</description>
  </permalink-provider>
  <permalink-provider name="Short (/time-in-millis.html)"
                      class="net.sourceforge.pebble.permalink.ShortPermalinkProvider">
    <description>Generates permalinks of the form /time-in-millis.html</description>
  </permalink-provider>
  <permalink-provider name="Title (/yyyy/mm/dd/each_word_in_the_title.html)"
                      class="net.sourceforge.pebble.permalink.TitlePermalinkProvider">
    <description>Generates permalinks of the form /yyyy/mm/dd/each_word_in_the_title.html</description>
  </permalink-provider>
  <permalink-provider name="SEO (/each_word_in_the_title.html)"
                      class="net.sourceforge.pebble.permalink.Latin1SeoPermalinkProvider">
    <description>Generates permalinks of the form /each_word_in_the_title.html</description>
  </permalink-provider>

  <!-- Page decoraters -->
  <page-decorator name="Facebook Connect Support" class="net.sourceforge.pebble.openid.FacebookOpenIdSupportDecorator">
    <description>
      <![CDATA[
      Provides support for other Facebook Connect plugins. This plugin is required to be enabled for the Facebook OpenId
      Comment Author Provider plugin to work. In order for this integration, you need a Facebook application ID, which
      needs to be configured below. For instructions on setting up a Facebook application, see
      <a href="http://wiki.developers.facebook.com/index.php/Connect/Setting_Up_Your_Site">here</a>.
    ]]>
    </description>
    <config key="facebook.app.id" name="Facebook Application ID" required="true"/>
  </page-decorator>

  <!-- Content decorators -->
  <content-decorator name="Blog Categories Decorator" class="net.sourceforge.pebble.decorator.BlogCategoriesDecorator">
    <description>
      Adds links from your blog entry back to your categories, for those categories associated with the blog entry.
    </description>
  </content-decorator>
  <content-decorator name="Blog Tags Decorator" class="net.sourceforge.pebble.decorator.BlogTagsDecorator">
    <description>
      Adds links from your blog entry back to your tags, for those tags associated with the blog entry.
    </description>
  </content-decorator>
  <content-decorator name="Disable Comments Decorator"
                     class="net.sourceforge.pebble.decorator.DisableCommentsDecorator"/>
  <content-decorator name="Disable Responses Decorator"
                     class="net.sourceforge.pebble.decorator.DisableResponseDecorator">
    <description>
      Disables comments and TrackBacks for the blog entry. This is useful if you are worried about spam when you don't
      have access to your blog. Needs to be used in conjunction with the DisableResponseListener (for comments and
      TrackBacks).
    </description>
  </content-decorator>
  <content-decorator name="Disable TrackBacks Decorator"
                     class="net.sourceforge.pebble.decorator.DisableTrackBacksDecorator"/>
  <content-decorator name="Entry to PDF Decorator" class="net.sourceforge.pebble.decorator.EntryToPdfDecorator">
    <description>
      <![CDATA[
      Adds link to your blog entries that allows export of the blog entry to PDF document. By default, PDF generation
      supports only "Latin 1" or ISO-8859-1 encoding (Asian, Hebrew, Arabic and Eastern European languages are not
      supported).
      <br/>
      <br/>
      You can enable support for your chosen language during PDF generation, by placing TTF or OTF font file
      under: <tt>&lt;PEBBLE_ROOT&gt;/themes/_pebble/fonts/</tt>. Font file will be loaded dynamically
      at run time during PDF generation.
      <br/>
      <br/>
      <b>Note:</b> CSS styles for PDF document template located in:
      <tt>&lt;PEBBLE_ROOT&gt;/themes/_pebble/pdf.css</tt>.
      ]]>
    </description>
  </content-decorator>
  <content-decorator name="Escape Markup Decorator" class="net.sourceforge.pebble.decorator.EscapeMarkupDecorator">
    <description>
      Escapes some XML/HTML markup between &amp;lt;escape&amp;gt;...&amp;lt;/escape&amp;gt; tags. This is useful where
      you would like to
      post large fragments of HTML, JSP, XML or Java code. In doing so, any &amp;lt; or &amp;gt; characters will be
      automatically escaped to &amp;amp;lt; and &amp;amp;gt; respectively.
    </description>
  </content-decorator>
  <content-decorator name="Excerpt Decorator" class="net.sourceforge.pebble.decorator.ExcerptDecorator">
    <description>
      Automatically creates an excerpt for blog entries if one doesn't already exist. Put this before the
      ReadMoreDecorator to ensure that "read more" links are also generated. The default maximum content length for
      truncation of the body is 255 characters.
    </description>
    <config key="ExcerptDecorator.maxLength" name="Max Length">
      <regex>/d+</regex>
    </config>
  </content-decorator>
  <content-decorator name="HTML Decorator" class="net.sourceforge.pebble.decorator.HtmlDecorator">
    <description>
      Filters the HTML inside comments and TrackBacks to use only a limited, safe subset of HTML.
    </description>
  </content-decorator>
  <content-decorator name="Enclose Entry In Div Decorator" class="net.sourceforge.pebble.decorator.EncloseEntryInDivDecorator">
    <description>
      Will enclose the content entry and all above plugins in a global DIV making it easier to differentiate them from the metainformation below in your CSS styling. The DIV id is [blogContentDecorated] for blog entries and [pageContentDecorated] for static pages.
    </description>
  </content-decorator>
  <content-decorator name="No Follow Decorator" class="net.sourceforge.pebble.decorator.NoFollowDecorator">
    <description>
      Adds links from your blog entry back to your categories, for those categories associated with the blog entry.
    </description>
  </content-decorator>
  <content-decorator name="Photo Decorator" class="net.sourceforge.pebble.decorator.PhotoDecorator"/>
  <content-decorator name="Radeox Decorator" class="net.sourceforge.pebble.decorator.RadeoxDecorator">
    <description>
      Renders content inside blog entries and static pages between &amp;lt;wiki&gt;...&amp;lt;/wiki&gt; tags using the
      Radeox
      library. Internal style wiki links (e.g. [aboutme]) link to the static page with the same name. If the static page
      doesn't exist, the link lets you create the page.
    </description>
  </content-decorator>
  <content-decorator name="Read More Decorator" class="net.sourceforge.pebble.decorator.ReadMoreDecorator">
    <description>
      Adds a "Read more..." link to blog entries in the following cases if: the blog entry excerpt is not empty and the
      page being displayed is a summary page (i.e. home, month or day page); or the blog entry is aggregated (i.e. the
      original permalink has been specified).
    </description>
  </content-decorator>
  <content-decorator name="Related Posts Decorator" class="net.sourceforge.pebble.decorator.RelatedPostsDecorator">
    <description>
      Finds similar posts to the current within your posts. Similarity is determined by comparing the tags.
      The default number of related posts displayed is five (5).
    </description>
    <config key="RelatedPostsDecorator.maxPosts" name="Max Posts">
      <regex>/d+</regex>
    </config>
  </content-decorator>
  <content-decorator name="Relative URI Decorator" class="net.sourceforge.pebble.decorator.RelativeUriDecorator">
    <description>
      Replaces relative URIs with absolute URLs so that they are rendered properly in browsers and newsreaders. For
      example, a link to &lt;tt&gt;./images/someimage.jpg&lt;/tt&gt; would be transformed to
      &lt;tt&gt;http://localhost:8080/images/someimage.jpg&lt;/tt&gt;.
    </description>
  </content-decorator>
  <content-decorator name="Social Bookmarks Decorator"
                     class="net.sourceforge.pebble.decorator.SocialBookmarksDecorator">
    <description>
      Adds recommendation links to popular social bookmarking sites to your blog entry. Currently included are:
      Slashdot, Digg, Reddit, Delicious and StumbleUpon
    </description>
  </content-decorator>

  <content-decorator name="Fixed Text Decorator" class="net.sourceforge.pebble.decorator.SuffixDecorator">
    <description>
      Adds a fixed to every blog entry. The suffix may contain the tags ${blogEntry.title}, ${blogEntry.subtitle},
      ${blogEntry.author}, ${blogEntry.id}, ${blogEntry.excerpt}, ${blogEntry.tags} or ${blogEntry.permalink}
      to include that property of the blog, and the property may be suffixed with ".encoded" to encode the value
      for use in a URL, eg ${blogEntry.permalink.encoded}.
    </description>
    <config key="SuffixDecorator.suffix" type="textarea" name="Suffix"/>
  </content-decorator>

  <content-decorator name="Static Page Tags Decorator"
                     class="net.sourceforge.pebble.decorator.StaticPageTagsDecorator"/>
  <content-decorator name="Technorati Tags Decorator" class="net.sourceforge.pebble.decorator.TechnoratiTagsDecorator">
    <description>
      Adds links from your blog entry back to tags on Technorati, for those tags associated with the blog entry.
    </description>
  </content-decorator>
  <content-decorator name="Thumbnails Decorator" class="net.sourceforge.pebble.decorator.ThumbnailDecorator">
    <description>
      <![CDATA[
    <p>
      Simple image thumbnail generator. Converts <code>&lt;thumbnail&gt</code>
      tags into image thumbnails with a link to the original image, which will
      be displayed in a popup window when clicked.  The following tag attributes
      are available:
    </p>
    <ul>
      <li><strong>src</strong> (mandatory) the URL of the image to be thumbnailed,
          which must be a locally-stored file, usually under <code>/images</code></li>
      <li><strong>thumbSize</strong> the maximum dimension of the generated thumbnail</li>
      <li><strong>popupSize</strong> the size of the popup window</li>
      <li><strong>alt</strong> the alt attribute for the thumbnail</li>
    </ul>
    <p>
      The CSS class for the thumbnail <code>A</code> tag is <code>thumbnailLink</code>
      and the class for the <code>IMG</code> tag is <code>thumbnailImage</code>.
    </p>
        ]]>
    </description>
    <config key="Thumbnail.thumbnailSize" name="Default thumbnail size"/>
    <config key="Thumbnail.popupSize" name="Default popup size"/>
  </content-decorator>

  <content-decorator name="TrackBack Auto-Discovery Decorator"
                     class="net.sourceforge.pebble.decorator.TrackBackAutoDiscoveryDecorator">
    <description>
      <![CDATA[
      Generates TrackBack Auto-Discovery links for blog entries. See the
      <a href="http://www.sixapart.com/pronet/docs/trackback_spec">TrackBack Technical Specification</a> for more
      details. To use this, you also need to configure the TrackBack Confirmation Strategy of your blog to be the
      NoOpConfirmationStrategy.
      ]]>
    </description>
  </content-decorator>

  <!-- Blog listeners -->
  <!-- There are none... -->

  <!-- Blog entry listeners -->
  <blog-entry-listener name="XML RPC Notification Listener"
                       class="net.sourceforge.pebble.event.blogentry.XmlRpcNotificationListener">
    <description>
      <![CDATA[
      Sends an <a href="/help/xmlrpcUpdatePings.html">XML-RPC update notification ping</a> when a blog entry is published.
      ]]>
    </description>
    <config key="XmlRpcNotificationListener.urlList" name="URL List"/>
  </blog-entry-listener>

  <blog-entry-listener name="Email blog owner"
                       class="net.sourceforge.pebble.event.blogentry.EmailNotificationListener">
    <description>
      Sends a notification e-mail to the blog owner when a new blog entry is added, changed or published.
    </description>
  </blog-entry-listener>
  <blog-entry-listener name="Mark Unpublished"
                       class="net.sourceforge.pebble.event.blogentry.MarkUnpublishedListener">
    <description>
      <![CDATA[
      Marks all new and changed blog entries to be unpublished, so that they require approval from the blog owner before
      being published on the blog. Only the following subset of properties, when changed, will cause a blog entry to be
      marked as unpublished.
      <ul>
        <li>Title</li>
        <li>Subtitle</li>
        <li>Excerpt</li>
        <li>Body</li>
        <li>Original permalink</li>
      </ul>
      ]]>
    </description>
  </blog-entry-listener>
  <blog-entry-listener name="Post to twitter"
                       class="net.sourceforge.pebble.event.blogentry.PostToTwitterBlogEntryListener">
    <description>
      Post the title and a tinyurl to twitter when a new blog entry is published.
    </description>
    <config key="twitter.username" name="Twitter username" required="true"/>
    <config key="twitter.password" name="Twitter password" required="true" type="password"/>
  </blog-entry-listener>
  <blog-entry-listener name="Run blog entries through W3C Tidy"
                       class="net.sourceforge.pebble.event.blogentry.TidyListener"/>
  <blog-entry-listener name="Publish blog entries to PubSubHubBub"
                       class="net.sourceforge.pebble.event.blogentry.PubSubHubBubBlogEntryListener">
    <description>
      <![CDATA[
      Notifies a PubSubHubBub Hub that a blog feed has changed.
      ]]>
    </description>
    <config key="pubsubhubbub.hubs" name="Hub List"/>
  </blog-entry-listener>

  <!-- Comment listeners -->
  <comment-listener name="Mark all comments pending" class="net.sourceforge.pebble.event.response.MarkPendingListener"
                    weight="20">
    <description>
      Marks all new comments with a status of pending so that they require approval from a blog contributor before being
      published on the blog.
    </description>
  </comment-listener>
  <comment-listener name="IP address spam check"
                    class="net.sourceforge.pebble.event.response.IpAddressListener" weight="30">
    <description>
      <![CDATA[
      Maintains both a blacklist and a whitelist of IP addresses, performing the following when a new comment is added.
      <ol>
        <li>If the IP address of the comment is contained within the blacklist, the comment is marked as pending and
        the comment's spam score is increased by 1 point.</li>
        <li>Otherwise, if the IP address of the comment is contained within the whitelist, the comment is left as-is.</li>
        <li>Otherwise, if the IP address of the comment is contained in neither list, the comment is marked as pending
        and the spam score remains unaffected.</li>
      </ol>
      In addition to this, the comment's IP address is removed from the blacklist (if applicable) and added to the
      whitelist when it is approved. Vice versa for comments that are rejected.
      ]]>
    </description>
    <config key="IpAddressListener.blacklist" type="textarea" name="Blacklist"/>
    <config key="IpAddressListener.whitelist" type="textarea" name="Whitelist"/>
  </comment-listener>
  <comment-listener name="Regex spam check" class="net.sourceforge.pebble.event.response.ContentSpamListener"
                    weight="30">
    <description>
      Checks the content of new comments for specific regular expressions. If the number of occurences is greater than
      the threshold, the comment is marked as pending and the comment's spam score is increased by 1 point. This is
      repeated for the title, author and website properties too. The default threshold for the number of occurences is
      0.
    </description>
    <config key="ContentSpamListener.threshold" name="Match threshold">
      <regex>/d+</regex>
    </config>
    <config key="ContentSpamListener.regexList" name="Regular Expressions" type="textarea"/>
  </comment-listener>
  <comment-listener name="Link spam check" class="net.sourceforge.pebble.event.response.LinkSpamListener"
                    weight="30">
    <description>
      Checks the content of new comments for the number of links that they contain. If this is greater than the
      threshold, the comment is marked as pending and the comment's spam score is increased by 1 point.
      The default threshold for the number of links is 3.
    </description>
    <config key="LinkSpamListener.commentThreshold" name="Link Threshold">
      <regex>/d+</regex>
    </config>
  </comment-listener>
  <comment-listener name="Reject comment if it exceeds a spam score"
                    class="net.sourceforge.pebble.event.response.SpamScoreListener" weight="40">
    <description>
      Checks the spam score of new comments and if greater than the threshold, the comment is marked as rejected. The
      default threshold is 1.
    </description>
    <config key="SpamScoreListener.commentThreshold" name="Spam score threshold">
      <regex>/d+</regex>
    </config>
  </comment-listener>
  <comment-listener name="Mark comment approved when authenticated"
                    class="net.sourceforge.pebble.event.response.MarkApprovedWhenAuthenticatedListener" weight="50"/>
  <comment-listener name="Mark all comments approved" class="net.sourceforge.pebble.event.response.MarkApprovedListener"
                    weight="50">
    <description>
      Marks all new comments with a status of pending so that they require approval from a blog contributor before being
      published on the blog.
    </description>
  </comment-listener>
  <comment-listener name="Delete rejected comments" class="net.sourceforge.pebble.event.response.DeleteRejectedListener"
                    weight="60">
    <description>
      Deletes new comments that have been marked as rejected.
    </description>
  </comment-listener>
  <comment-listener name="Disable all comments" class="net.sourceforge.pebble.event.response.DisableResponseListener"
                    weight="60">
    <description>
      Deletes new comments, effectively disabling the ability for readers to leave comments.
    </description>
  </comment-listener>
  <comment-listener name="Email blog author and comment authors"
                    class="net.sourceforge.pebble.event.comment.EmailAuthorNotificationListener" weight="70">
    <description>
      <![CDATA[
       Sends a notification e-mail when a new comment is added.
       <ul>
           <li>If the status of the comment is pending, an e-mail is sent to the blog entry author asking for approval.</li>
           <li>If the status of the comment is approved, an e-mail is sent to the blog entry author and all comment
           authors for the blog entry that have left their e-mail addresses.</li>
       </ul>
       ]]>
    </description>
  </comment-listener>
  <comment-listener name="Email blog owner and comment authors"
                    class="net.sourceforge.pebble.event.comment.EmailNotificationListener" weight="70">
    <description>
      <![CDATA[
      Sends a notification e-mail when a new comment is added.
      <ul>
          <li>If the status of the comment is pending, an e-mail is sent to the blog owner asking for approval.</li>
          <li>If the status of the comment is approved, an e-mail is sent to the blog owner and all comment authors for
           the blog entry that have left their e-mail addresses.</li>
      </ul>
      ]]>
    </description>
  </comment-listener>

  <!-- Comment confirmation strategies -->
  <comment-confirmation-strategy name="Default"
                                 class="net.sourceforge.pebble.confirmation.DefaultConfirmationStrategy">
    <description>
      Asks the reader to confirm their action by clicking a button. This is the simplest strategy but also one that
      automated spambots can easily work around.
    </description>
  </comment-confirmation-strategy>
  <comment-confirmation-strategy name="Image Captcha"
                                 class="net.sourceforge.pebble.confirmation.ImageCaptchaConfirmationStrategy">
    <description>
      Asks the reader to confirm their action by entering the text they see in a distorted image.
    </description>
  </comment-confirmation-strategy>
  <comment-confirmation-strategy name="No Op" class="net.sourceforge.pebble.confirmation.NoOpConfirmationStrategy">
    <description>
      A strategy that doesn't require comments/TrackBacks to be confirmed. Use this if you want to leave
      comment/TrackBack spam detection to the set of configured comment listeners instead of introducing a manual step
      in the process. Also use this strategy if you intend to enable TrackBack Auto-Discovery.
    </description>
  </comment-confirmation-strategy>
  <comment-confirmation-strategy name="Simple Maths"
                                 class="net.sourceforge.pebble.confirmation.SimpleMathsConfirmationStrategy">
    <description>
      Asks the reader to confirm their action by answering a simple maths question based on the addition, subtraction or
      multiplication of two numbers between 1 and 10.
    </description>
  </comment-confirmation-strategy>
  
  <comment-confirmation-strategy name="reCAPTCHA"
                                   class="net.sourceforge.pebble.confirmation.ReCaptchaConfirmationStrategy">
    <description>
      Asks the reader to confirm their action by entering the text they see in a distorted image. Makes use of reCAPTCHA technology.
    </description>
    <config key="reCAPTCHA.public.key" name="reCAPTCHA Public API Key" required="true"/>
    <config key="reCAPTCHA.private.key" name="reCAPTCHA Private API Key" required="true"/>
  </comment-confirmation-strategy>

  <!-- OpenID comment author providers -->
  <open-id-comment-author-provider name="Facebook OpenID Comment Author Provider"
                                   class="net.sourceforge.pebble.openid.FacebookOpenIdCommentAuthorProvider">
    <description>
      Provides the ability for users to supply their user details from Facebook when commenting. Requires Facebook
      Connect Support page decorator to be enabled and configured in order to work.
    </description>
  </open-id-comment-author-provider>

  <!-- Trackback listeners -->
  <trackback-listener name="Mark all TrackBacks pending"
                      class="net.sourceforge.pebble.event.response.MarkPendingListener" weight="20">
    <description>
      Marks all new TrackBacks with a status of pending so that they require approval from a blog contributor before
      being published on the blog.
    </description>
  </trackback-listener>
  <trackback-listener name="IP address spam check"
                      class="net.sourceforge.pebble.event.response.IpAddressListener" weight="30">
    <description>
      <![CDATA[
      Maintains both a blacklist and a whitelist of IP addresses, performing the following when a new TrackBack is added.
      <ol>
        <li>If the IP address of the TrackBack is contained within the blacklist, the TrackBack is marked as pending and
        the TrackBack's spam score is increased by 1 point.</li>
        <li>Otherwise, if the IP address of the TrackBack is contained within the whitelist, the TrackBack is left as-is.</li>
        <li>Otherwise, if the IP address of the TrackBack is contained in neither list, the TrackBack is marked as pending
        and the spam score remains unaffected.</li>
      </ol>
      In addition to this, the TrackBack's IP address is removed from the blacklist (if applicable) and added to the
      whitelist when it is approved. Vice versa for TrackBacks that are rejected.
      ]]>
    </description>
    <config key="IpAddressListener.blacklist" type="textarea" name="Blacklist"/>
    <config key="IpAddressListener.whitelist" type="textarea" name="Whitelist"/>
  </trackback-listener>
  <trackback-listener name="Regex spam check" class="net.sourceforge.pebble.event.response.ContentSpamListener"
                      weight="30">
    <description>
      Checks the content of new TrackBacks for specific regular expressions. If the number of occurences is greater than
      the threshold, the TrackBack is marked as pending and the TrackBack's spam score is increased by 1 point. This is
      repeated for the title, author and website properties too. The default threshold for the number of occurences is
      0.
    </description>
    <config key="ContentSpamListener.threshold" name="Match threshold">
      <regex>/d+</regex>
    </config>
    <config key="ContentSpamListener.regexList" name="Regular Expressions" type="textarea"/>
  </trackback-listener>
  <trackback-listener name="Links spam check"
                      class="net.sourceforge.pebble.event.response.LinkSpamListener" weight="30">
    <description>
      Checks the content of new TrackBacks for the number of links that they contain. If this is greater than the
      threshold, the TrackBack is marked as pending and the TrackBack's spam score is increased by 1 point.
      The default threshold for the number of links is 3.
    </description>
    <config key="LinkSpamListener.trackbackThreshold" name="Link Threshold">
      <regex>/d+</regex>
    </config>
  </trackback-listener>
  <trackback-listener name="Reject trackback if it exceeds a spam score"
                      class="net.sourceforge.pebble.event.response.SpamScoreListener" weight="40">
    <description>
      Checks the spam score of new TrackBacks and if greater than the threshold, the TrackBack is marked as rejected.
      The default threshold is 1.
    </description>
    <config key="SpamScoreListener.trackbackThreshold" name="Spam score threshold">
      <regex>/d+</regex>
    </config>
  </trackback-listener>
  <trackback-listener name="Mark trackback approved when authenticated"
                      class="net.sourceforge.pebble.event.response.MarkApprovedWhenAuthenticatedListener" weight="50"/>
  <trackback-listener name="Mark all trackbacks approved"
                      class="net.sourceforge.pebble.event.response.MarkApprovedListener" weight="50">
    <description>
      Marks all new TrackBacks with a status of approved so that they appear on your blog immediately. This is useful
      for internal blogs where you aren't worried about spam and don't need TrackBacks to be approved before being
      published.
    </description>
  </trackback-listener>
  <trackback-listener name="Delete rejected trackbacks"
                      class="net.sourceforge.pebble.event.response.DeleteRejectedListener" weight="60">
    <description>
      Deletes new TrackBacks that have been marked as rejected.
    </description>
  </trackback-listener>
  <trackback-listener name="Delete all trackbacks" class="net.sourceforge.pebble.event.response.DisableResponseListener"
                      weight="60">
    <description>
      Deletes new TrackBacks, effectively disabling the ability for readers to leave TrackBacks.
    </description>
  </trackback-listener>
  <trackback-listener name="Email blog entry author"
                      class="net.sourceforge.pebble.event.trackback.EmailAuthorNotificationListener" weight="70">
    <description>
      Sends a notification e-mail when a new TrackBack is added to the blog entry author, additionally asking for
      approval if the status of the TrackBack is pending.
    </description>
  </trackback-listener>
  <trackback-listener name="Email blog owner"
                      class="net.sourceforge.pebble.event.trackback.EmailNotificationListener" weight="70">
    <description>
      Sends a notification e-mail when a new TrackBack is added to the blog owner, additionally asking for approval if
      the status of the TrackBack is pending.
    </description>
  </trackback-listener>

  <!-- Trackback confirmation strategies -->
  <trackback-confirmation-strategy name="Default"
                                   class="net.sourceforge.pebble.confirmation.DefaultConfirmationStrategy">
    <description>
      Asks the reader to confirm their action by clicking a button. This is the simplest strategy but also one that
      automated spambots can easily work around.
    </description>
  </trackback-confirmation-strategy>
  <trackback-confirmation-strategy name="Image Captcha"
                                   class="net.sourceforge.pebble.confirmation.ImageCaptchaConfirmationStrategy">
    <description>
      Asks the reader to confirm their action by entering the text they see in a distorted image.
    </description>
  </trackback-confirmation-strategy>

  <trackback-confirmation-strategy name="No Op" class="net.sourceforge.pebble.confirmation.NoOpConfirmationStrategy">
    <description>
      A strategy that doesn't require comments/TrackBacks to be confirmed. Use this if you want to leave
      comment/TrackBack spam detection to the set of configured comment listeners instead of introducing a manual step
      in the process. Also use this strategy if you intend to enable TrackBack Auto-Discovery.
    </description>
  </trackback-confirmation-strategy>
  <trackback-confirmation-strategy name="Simple Maths"
                                   class="net.sourceforge.pebble.confirmation.SimpleMathsConfirmationStrategy">
    <description>
      Asks the reader to confirm their action by answering a simple maths question based on the addition, subtraction or
      multiplication of two numbers between 1 and 10.
    </description>
  </trackback-confirmation-strategy>

  <!-- Lucene Analyzers -->
  <lucene-analyzer name="Simple Analyzer" class="org.apache.lucene.analysis.SimpleAnalyzer"/>
  <lucene-analyzer name="Whitespace Analyzer" class="org.apache.lucene.analysis.WhitespaceAnalyzer"/>
  <lucene-analyzer name="German Analyzer" class="org.apache.lucene.analysis.de.GermanAnalyzer"/>
  <lucene-analyzer name="Russian Analyzer" class="org.apache.lucene.analysis.ru.RussianAnalyzer"/>
  <lucene-analyzer name="English Analyzer" class="org.apache.lucene.analysis.standard.StandardAnalyzer"/>


  <!-- Loggers -->
  <logger name="Default Logger" class="net.sourceforge.pebble.logging.CombinedLogFormatLogger">
    <description>
      A logger that writes log files in the the Combined Log Format. This is the default logger.
    </description>
  </logger>
  <logger name="None" class="net.sourceforge.pebble.logging.NullLogger">
    <description>
      A no-op logger that can be used when Pebble logging isn't required, such as when something like Apache provides
      the necessary logging already. Pebble will not capture any statistics when this logger is used.
    </description>
  </logger>


  <!-- Feed Decorators -->
  <feed-decorator name="PubSubHubBub Feed Decorator" class="net.sourceforge.pebble.decorator.PubSubHubBubFeedDecorator">
    <description>
      Decorates Atom feeds with PubSubHubBub hub links, so that subscribers can subscribe to a hub for PUSH updates to
      feeds.  Note, if you enable this plugin, you MUST enable both the PubSubHubBub blog entry listener, and the
      PubSubHubBub comment listener, otherwise feed aggregators will not poll, but rather expect push updates from the
      hub.
    </description>
    <config key="pubsubhubbub.hubs" name="Hub List"/>
  </feed-decorator>

</pebble-plugins>
