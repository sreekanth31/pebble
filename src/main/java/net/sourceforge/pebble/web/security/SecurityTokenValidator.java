/*
 * Copyright (c) 2003-2011, Simon Brown
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *   - Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *
 *   - Neither the name of Pebble nor the names of its contributors may
 *     be used to endorse or promote products derived from this software
 *     without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
package net.sourceforge.pebble.web.security;

import net.sourceforge.pebble.web.action.Action;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.util.Map;

/**
 * Validator for XSRF security tokens
 *
 * @author James Roper
 */
public interface SecurityTokenValidator {

  /**
   * Validate the security token for this request, if necessary, setting up the security token cookie if it doesn't
   * exist
   *
   * @param request  The request to validate
   * @param response The response
   * @param action   The action to validate
   * @return true if the request can proceed, false if not
   */
  boolean validateSecurityToken(HttpServletRequest request, HttpServletResponse response, Action action);

  /**
   * Hashes the given query parameters by sorting the keys alphabetically and then hashing the & separated query String
   * that would be generated by having the keys in that order, concatinated with the salt
   *
   * @param params The parameters in the query String
   * @param salt   The secret salt
   * @return The hash in base64
   */
  String hashRequest(String servletPath, Map<String, String[]> params, String salt);

  /**
   * Generate a signed query string
   *
   * @param params The parameters in the query string.  This method assumes the parameters are not URL encoded
   * @param salt   The salt to sign it with
   * @return The HTML escaped signed query string
   */
  String generateSignedQueryString(String servletPath, Map<String, String[]> params, String salt);
}